# Containerfile
FROM python:3.12-slim

# Build argument to control PyTorch variant (cpu or cuda)
ARG TORCH_VARIANT=cpu

# Install system dependencies including python dev headers for asyncpg
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libpq-dev \
    postgresql-client \
    bash \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy db package
WORKDIR /app
COPY packages/db /app/packages/db

# Copy sample data files
COPY data/ /app/data/

# Install uv + deps
RUN pip install uv
RUN uv venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install PyTorch based on TORCH_VARIANT (cpu for local, cuda for production)
RUN if [ "$TORCH_VARIANT" = "cpu" ]; then \
        echo "Installing PyTorch CPU version (lightweight, ~176MB)..." && \
        uv pip install --index-url https://download.pytorch.org/whl/cpu torch; \
    else \
        echo "Installing PyTorch CUDA version (GPU-enabled, ~800MB)..." && \
        uv pip install torch; \
    fi

# Install db package WITH ML dependencies for embeddings generation
RUN uv pip install -e "./packages/db[ml]"

# Copy and setup startup script
COPY packages/db/startup.sh /app/startup.sh
RUN chmod +x /app/startup.sh

# Run startup script which handles migrations and data loading
CMD ["/app/startup.sh"]
